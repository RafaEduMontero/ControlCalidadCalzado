// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using CapaDatos.Models;
using Microsoft.EntityFrameworkCore;

namespace CapaDatos.Context
{
    public partial class CONTROLDECALIDADContext : DbContext
    {
        public CONTROLDECALIDADContext()
        {
        }

        public CONTROLDECALIDADContext(DbContextOptions<CONTROLDECALIDADContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Administrador> Administrador { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<Defecto> Defecto { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<JornadaLaboral> JornadaLaboral { get; set; }
        public virtual DbSet<Linea> Linea { get; set; }
        public virtual DbSet<Modelo> Modelo { get; set; }
        public virtual DbSet<OrdenProduccion> OrdenProduccion { get; set; }
        public virtual DbSet<Primera> Primera { get; set; }
        public virtual DbSet<RegistroDefecto> RegistroDefecto { get; set; }
        public virtual DbSet<SupervisorCalidad> SupervisorCalidad { get; set; }
        public virtual DbSet<SupervisorLinea> SupervisorLinea { get; set; }
        public virtual DbSet<TipoDefecto> TipoDefecto { get; set; }
        public virtual DbSet<Turno> Turno { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Administrador>(entity =>
            {
                entity.HasKey(e => e.IdAdministrador);

                entity.HasOne(d => d.IdEmpleadoNavigation)
                    .WithMany(p => p.Administrador)
                    .HasForeignKey(d => d.IdEmpleado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Administrador_Empleado");
            });

            modelBuilder.Entity<Color>(entity =>
            {
                entity.HasKey(e => e.IdColor);

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Defecto>(entity =>
            {
                entity.HasKey(e => e.IdDefecto);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdTipoDefectoNavigation)
                    .WithMany(p => p.Defecto)
                    .HasForeignKey(d => d.IdTipoDefecto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Defecto_TipoDefecto");
            });

            modelBuilder.Entity<Empleado>(entity =>
            {
                entity.HasKey(e => e.IdEmpleado);

                entity.Property(e => e.Apellido)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dni)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JornadaLaboral>(entity =>
            {
                entity.HasKey(e => e.IdJornadaLaboral);

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.HasOne(d => d.IdOrdenProduccionNavigation)
                    .WithMany(p => p.JornadaLaboral)
                    .HasForeignKey(d => d.IdOrdenProduccion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JornadaLaboral_OrdenProduccion");

                entity.HasOne(d => d.IdSupervisorCalidadNavigation)
                    .WithMany(p => p.JornadaLaboral)
                    .HasForeignKey(d => d.IdSupervisorCalidad)
                    .HasConstraintName("FK_JornadaLaboral_SupervisorCalidad");

                entity.HasOne(d => d.IdTurnoNavigation)
                    .WithMany(p => p.JornadaLaboral)
                    .HasForeignKey(d => d.IdTurno)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JornadaLaboral_Turno");
            });

            modelBuilder.Entity<Linea>(entity =>
            {
                entity.HasKey(e => e.IdLinea);

                entity.Property(e => e.Numero)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Modelo>(entity =>
            {
                entity.HasKey(e => e.IdModelo);

                entity.Property(e => e.Denominacion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LimiteInferiorObservado).HasMaxLength(50);

                entity.Property(e => e.LimiteInferiorReproceso).HasMaxLength(50);

                entity.Property(e => e.LimiteSuperiorObservado).HasMaxLength(50);

                entity.Property(e => e.LimiteSuperiorReproceso).HasMaxLength(50);

                entity.Property(e => e.Sku)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OrdenProduccion>(entity =>
            {
                entity.HasKey(e => e.IdOrdenProduccion);

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.Numero)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdColorNavigation)
                    .WithMany(p => p.OrdenProduccion)
                    .HasForeignKey(d => d.IdColor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenProduccion_Color");

                entity.HasOne(d => d.IdLineaNavigation)
                    .WithMany(p => p.OrdenProduccion)
                    .HasForeignKey(d => d.IdLinea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenProduccion_Linea");

                entity.HasOne(d => d.IdModeloNavigation)
                    .WithMany(p => p.OrdenProduccion)
                    .HasForeignKey(d => d.IdModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenProduccion_Modelo");

                entity.HasOne(d => d.IdSupervisorLineaNavigation)
                    .WithMany(p => p.OrdenProduccion)
                    .HasForeignKey(d => d.IdSupervisorLinea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenProduccion_SupervisorLinea");
            });

            modelBuilder.Entity<Primera>(entity =>
            {
                entity.HasKey(e => e.IdPrimera);

                entity.Property(e => e.Hora).HasColumnType("datetime");

                entity.HasOne(d => d.IdJornadaLaboralNavigation)
                    .WithMany(p => p.Primera)
                    .HasForeignKey(d => d.IdJornadaLaboral)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Primera_JornadaLaboral");
            });

            modelBuilder.Entity<RegistroDefecto>(entity =>
            {
                entity.HasKey(e => e.IdRegistroDefecto);

                entity.Property(e => e.Hora).HasColumnType("datetime");

                entity.HasOne(d => d.IdDefectoNavigation)
                    .WithMany(p => p.RegistroDefecto)
                    .HasForeignKey(d => d.IdDefecto)
                    .HasConstraintName("FK_RegistroDefecto_Defecto");

                entity.HasOne(d => d.IdJornadaLaboralNavigation)
                    .WithMany(p => p.RegistroDefecto)
                    .HasForeignKey(d => d.IdJornadaLaboral)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroDefecto_JornadaLaboral");
            });

            modelBuilder.Entity<SupervisorCalidad>(entity =>
            {
                entity.HasKey(e => e.IdSupervisorCalidad);

                entity.HasOne(d => d.IdEmpleadoNavigation)
                    .WithMany(p => p.SupervisorCalidad)
                    .HasForeignKey(d => d.IdEmpleado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupervisorCalidad_Empleado");
            });

            modelBuilder.Entity<SupervisorLinea>(entity =>
            {
                entity.HasKey(e => e.IdSupervisorLinea);

                entity.HasOne(d => d.IdEmpleadoNavigation)
                    .WithMany(p => p.SupervisorLinea)
                    .HasForeignKey(d => d.IdEmpleado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupervisorLinea_SupervisorLinea");
            });

            modelBuilder.Entity<TipoDefecto>(entity =>
            {
                entity.HasKey(e => e.IdTipoDefecto);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Turno>(entity =>
            {
                entity.HasKey(e => e.IdTurno);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}